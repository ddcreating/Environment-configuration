1、安装rqt工具
Linux：
sudo apt update
sudo apt install ~nros-foxy-rqt*
安装完成后使用如下命令运行： rqt

#rqt_graph
可以从上帝视角看到整个系统的状态，ROS2中依然如此，我们还是使用这个工具来可视化显示节点和话题的连接关系。   
在一个新的终端中，输入
  rqt_graph
看到熟悉的界面，里边清晰的展示了ROS计算图的网络形态。  

小海龟仿真器的例子：
https://www.guyuehome.com/10386

查看list的命令
ros2 node list      #查看节点list
ros2 topic list     #查看话题list
ros2 service list   #查看服务list
ros2 action list     #查看动作list
ros2 param list   #查看参数列表

 一、理解节点node  具体地址 https://www.guyuehome.com/10465
1.ros2 run
  ros2 run相当于ROS1中的rosrun，主要作用是运行某个功能包中的可执行程序，使用语法如下：
       ros2 run <package_name> <executable_name>
  比如小海龟仿真界面就是节点的执行程序，位于turtlesim功能包中，启动它的命令就是：
       ros2 run turtlesim turtlesim_node
  ！！！注意，这里的turtlesim_node只是可执行文件的名字，并不是节点名，想要知道节点叫什么，我们需要运行如下命令
       ros2 node list
       
2.1 重映射（Remapping）
  ROS中的重映射机制可以帮助我们重定义节点的属性，比如节点名称、话题名称、服务名称等。比如我们想修改看到的节点名turtlesim，那就可以这样：
       ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle3.ros2 node info
       
3.ros2 node info
我们还是不满足于仅仅看到节点的名字，如果想要了解节点的更多信息，那就得用这个命令了：
   ros2 node info <node_name>
比如我想了解刚启动的my_turtle节点的更多信息：
  ros2 node info /my_turtle       ###可以用
 一下可以看到节点的很多信息，包括订阅者、发布者、服务、动作等等。  
 
 二、理解topic  https://www.guyuehome.com/10560
ros2 topic list       #查看系统中所有的话题
ros2 topic list -t    #查看话题传输的是什么数据
ros2 topic echo <topic_name>    #查看节点之间的话题到底发了什么数据内容 线速度、角速度或者什么
e.g.  ros2 topic echo /turtle1/cmd_vel

ros2 topic info /turtle1/cmd_vel  #查看话题的详细信息。话题类型，发布者和订阅者的数量

通过 ros2 topic list -t 可以看到， cmd_vel 话题的消息类型是： geometry_msgs/msg/Twist
ros2 interface show geometry_msgs/msg/Twist      #查看数据类型的具体数据结构什么样, Twist中包含了两个三维向量，分别表示线速度和角速度。  
ros2 topic pub <topic_name> <msg_type> '<args>'  #通过命令行来发布一个话题消息
e.g. ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"

ros2 topic hz /turtle1/pose  #查看某一个话题的发布频率

三、理解服务（Service） https://www.guyuehome.com/10721
服务是基于客户端/服务器模型的通信机制，服务器端只在接收到客户端请求时才会提供反馈数据；
可以多个客户端请求一个服务
ros2 service list   #查看服务列表
ros2 service list -t  #查看所有服务的数据类型 -t表示show type
ros2 service type <service_name>  #查看某一个服务的数据结构 
e.g. ros2 service type /clear #以/clear服务为例, Empty类型表示服务请求部分的数据是没有的，发送请求的时候不需要任何数据。  

ros2 service find <type_name>   #查看所有提供同样数据类型的的服务
ros2 service find std_srvs/srv/Empty #查找所有提供std_srvs/srv/Empty数据类型的服务

ros2 interface show <type_name>.srv #查看数据类型具体的数据结构
比如：ros2 interface show std_srvs/srv/Empty.srv
终端中会显示：“---”， “---”在服务的数据结构中是用来分割请求和应答两个部分的数据，这里只所以只有“---”，
是应为Empty的请求和应答都不需要任何数据描述，类似一个出发信号。 
eg ros2 interface show turtlesim/srv/Spawn.srv  
#这里可以看到，在Spawn服务的请求部分，由必须的x、y、theta和可选的name组成，应答数据则是name这个字符串。  

ros2 service call <service_name> <service_type> <arguments>  #通过终端尝试发送一个服务请求，<arguments>部分是可选的，比如Empty类型的服务就没有任何参数
e.g ros2 service call /clear std_srvs/srv/Empty   #这个服务只是出发一个信号，让海龟仿真器清除海龟后边的运动轨迹，不需要传输什么数据

 
四、理解参数（Parameter）   https://www.guyuehome.com/10864
ros2 param list  #看当前运行的系统中，有哪些参数
ros2 param get <node_name> <parameter_name>  #查看某个参数的值
ros2 param get /turtlesim background_g      # 比如看下背景颜色中的g值
ros2 param set <node_name> <parameter_name> <value>  #设置某一个参数的值  
ros2 param set /turtlesim background_r 150           # 比如修改仿真器背景色中的r值为150

ros2 param dump <node_name>  #使用dump命令来保存节点所有的参数到文件中   
ros2 param dump /turtlesim   #比如保存turtlesim节点的参数

ros2 run <package_name> <executable_name> --ros-args --params-file <file_name>  #加载参数文件 
比如：ros2 run turtlesim turtlesim_node --ros-args --params-file ./turtlesim.yaml

五、理解动作（Action）        https://www.guyuehome.com/10898
之前介绍到的话题和服务是ROS中最重要的两种底层通信机制，但也并不是说能解决所有应用层的问题，举一个例子，如果要让机械臂抓取一个物体，
我们不仅要发出指令，还需要获取机械臂的实时反馈，如果直接用话题和服务也可以实现，不过一下得上好几个，有点麻烦。 所以针对类似的场景，
ROS推出了一个应用级的通信机制——动作（action），主要结局需要运行一段时间的机器人任务。action也并不是一个全新的机制，而是由底层的三个
话题和服务组成：一个任务目标（Goal，服务），一个执行结果（Result，服务），周期数据反馈（Feedback，话题）。   action是可抢占式的，
由于需要执行一段时间，比如执行过程中你不想跑了，那可以随时发送取消指令，动作终止，如果执行过程中发送一个新的action目标，则会直接中断上
一个目标开始执行最新的任务目标。   总体上来讲，action是一个客户端/服务器的通信模型，客户端发送一个任务目标，服务器端根据收到的目标执行
并周期反馈状态，执行完成后反馈一个执行结果。
  
ros2 action list        #查看action列表
ros2 action list -t     #查看更详细的action数据类型
ros2 action info /turtle1/rotate_absolute     #查看action的信息，从list列表中看到的action
ros2 interface show turtlesim/action/RotateAbsolute.action   #查看action数据类型的具体数据结构

ros2 action send_goal <action_name> <action_type> <values>    #命令行发送action目标 
e.g ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: 1.57}"
从以上信息我们可以看到，每一个action目标都有一个唯一的ID。   如果先要看到action中的周期反馈，以上命令还需要加一个--feedback参数：
ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: -1.57}" --feedback

五、rqt_console工具的使用
ros2 run rqt_console rqt_console
rqt_graph   #查看更明确的节点关系

